{"version":3,"sources":["Components/Input.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx","Components/input.module.css"],"names":["Input","props","useState","error","setError","className","s","errorMessage","value","title","onChange","e","setTitle","currentTarget","onKeyPress","key","callBack","Todolist","taskList","tasks","map","t","isDone","id","onClick","tId","todoListID","removeTask","changeStatus","checked","onChangeHandler","type","addTaskHandler","addTasks","allBtnClass","filter","activeBtnClass","completedBtnClass","removeTodoList","title13","changeFilter","App","todoListID_1","v1","todoListID_2","todoLists","setTodoLists","setTasks1","addTask","trim","newTask","removeTasks","taskID","ft","f","tl","todoListsComponents","durshlak","newTlID","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message","module","exports"],"mappings":"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","file":"static/js/main.4a5492a8.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport s from './input.module.css'\r\n\r\ntype InputPropsType = {\r\n    callBack: (title: string) => void\r\n    title: string\r\n    setTitle: (title:string)=>void\r\n}\r\n\r\nexport const Input = (props: InputPropsType) => {\r\n    let [error, setError] = useState(false)\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            props.callBack(props.title)\r\n            props.setTitle('')\r\n            setError(true)\r\n        }\r\n    }\r\n\r\n    const onchangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError(false)\r\n        props.setTitle(e.currentTarget.value)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <input\r\n                className={error?s.error:s.errorMessage}\r\n                value={props.title}\r\n                onChange={onchangeHandler}\r\n                onKeyPress={onKeyPressHandler}/>\r\n            {error&&<div className={s.errorMessage}>Title is required</div>}\r\n            {/*<button onClick={addTaskHandler}>+</button>*/}\r\n        </div>)\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {filterType, TaskType} from \"./App\";\r\nimport {Input} from \"./Components/Input\";\r\nimport s from \"./Todolist.module.css\"\r\nimport './App.css'\r\n\r\ntype propsType = {\r\n    id: string\r\n    title13: string,\r\n    tasks: Array<TaskType>\r\n    filter: filterType\r\n    removeTask: (taskId: string, todoListID: string) => void\r\n    changeFilter: (value: filterType, todoListID: string) => void\r\n    addTasks: (title: string, todoListID: string) => void\r\n    changeStatus: (checked: boolean, id: string,  todoListID: string) => void\r\n    removeTodoList: (todoListID:string)=>void\r\n}\r\n\r\n\r\nexport const Todolist = (props: propsType) => {\r\n    const removeTaskHandler = (tId: string, todoListID: string) => {\r\n        props.removeTask(tId, todoListID)\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>, tId: string, todoListID: string) => {\r\n        props.changeStatus(e.currentTarget.checked, tId, todoListID)\r\n    }\r\n    const taskList = props.tasks.map(t => {\r\n\r\n        return (\r\n            <li\r\n                className={t.isDone?\"isDone\":\"\"}\r\n                key={t.id}>\r\n                <button onClick={()=>removeTaskHandler(t.id, props.id)}>X</button>\r\n                <input onChange={(e) => onChangeHandler(e, t.id, props.id)} type=\"checkbox\" checked={t.isDone}/>\r\n                <span>{t.title}</span>\r\n            </li>\r\n        )\r\n    })\r\n\r\n    let [title, setTitle] = useState('')\r\n\r\n    const changeFilterHandlerAll = () => {\r\n        return (props.changeFilter('All', props.id))\r\n    }\r\n    const changeFilterHandlerActive = () => {\r\n        props.changeFilter('Active', props.id)\r\n    }\r\n    const changeFilterHandlerCompleted = () => {\r\n        props.changeFilter('Completed', props.id)\r\n    }\r\n\r\n    const addTaskHandler = () => {\r\n        props.addTasks(title, props.id)\r\n        setTitle('')\r\n    }\r\n    const removeTodoListHandler = () => {\r\n        props.removeTodoList(props.id)\r\n    }\r\n    const allBtnClass = props.filter ===\"All\"?\"activeFilter\":\"\"\r\n    const activeBtnClass = props.filter ===\"Active\"?\"activeFilter\":\"\"\r\n    const completedBtnClass = props.filter ===\"Completed\"?\"activeFilter\":\"\"\r\n    return (\r\n        <div>\r\n            <div>\r\n                <button onClick={removeTodoListHandler}>X</button>\r\n                <h3>{props.title13}</h3>\r\n            </div>\r\n\r\n            <Input callBack={addTaskHandler} title={title} setTitle={setTitle}/>\r\n            <button onClick={addTaskHandler}>+</button>\r\n            <ul>\r\n                {taskList}\r\n            </ul>\r\n            <div>\r\n                <button className={allBtnClass} onClick={changeFilterHandlerAll}>All</button>\r\n                <button className={activeBtnClass} onClick={changeFilterHandlerActive}>Active</button>\r\n                <button className={completedBtnClass} onClick={changeFilterHandlerCompleted}>Completed</button>\r\n\r\n\r\n\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from \"./Todolist\";\r\nimport {v1} from \"uuid\";\r\n\r\n\r\n\r\nexport type filterType = \"All\" | \"Active\" | \"Completed\"\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\ntype TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: filterType\r\n}\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n    const todoListID_1 = v1()\r\n    const todoListID_2 = v1()\r\n    const [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n        {id: todoListID_1, title: \"What to learn\", filter: \"All\"},\r\n        {id: todoListID_2, title: \"What to buy\", filter: \"Active\"}\r\n    ])\r\n    const [tasks, setTasks1] = useState<TasksStateType>({\r\n        [todoListID_1]: [\r\n            {id: v1(), title: 'HTML', isDone: true},\r\n            {id: v1(), title: 'JS', isDone: false},\r\n            {id: v1(), title: 'React', isDone: true},\r\n            {id: v1(), title: 'Redux', isDone: false},\r\n        ],\r\n        [todoListID_2]: [\r\n            {id: v1(), title: 'Meat', isDone: true},\r\n            {id: v1(), title: 'beer', isDone: false},\r\n            {id: v1(), title: 'Milk', isDone: false},\r\n            {id: v1(), title: 'bread', isDone: false},\r\n        ]\r\n\r\n    })\r\n\r\n    const addTask = (title: string, todoListID: string) => {\r\n        if (title.trim() != '') {\r\n            let newTask: TaskType = {id: v1(), title: title.trim(), isDone: true};\r\n            setTasks1({...tasks, [todoListID]: [newTask, ...tasks[todoListID]]})\r\n        }\r\n\r\n\r\n    }\r\n    const removeTasks = (taskID: string, todoListID: string) => {\r\n        tasks[todoListID] = tasks[todoListID].filter(ft => ft.id !== taskID)\r\n        setTasks1({...tasks})\r\n    }\r\n    const changeFilter = (value: filterType, todoListID: string) => {\r\n        setTodoLists(todoLists.map(t => t.id === todoListID ? {...t, filter: value} : t))\r\n    }\r\n    const changeStatus = (checked: boolean, id: string, todoListID: string) => {\r\n        setTasks1({\r\n            ...tasks,\r\n            [todoListID]: tasks[todoListID].map(f => f.id === id ? {...f, isDone: checked} : f)\r\n        })\r\n    }\r\n    const removeTodoList = (todoListID: string) => {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== todoListID))\r\n        delete tasks[todoListID]\r\n    }\r\n    const addTodoList = () => {\r\n        let newTlID = v1();\r\n        setTodoLists([...todoLists, {id: newTlID, title: \"What to learn\", filter: \"All\"}])\r\n        setTasks1({...tasks, [newTlID]:[]})\r\n    }\r\n\r\n\r\n    const todoListsComponents = todoLists.map(tl => {\r\n        let durshlak = tasks[tl.id]\r\n        if (tl.filter === \"Active\") {\r\n            durshlak = tasks[tl.id].filter(t => !t.isDone)\r\n        }\r\n        if (tl.filter === \"Completed\") {\r\n            durshlak = tasks[tl.id].filter(t => t.isDone)\r\n        }\r\n        return (\r\n            <Todolist\r\n                key={tl.id}\r\n                id={tl.id}\r\n                title13={tl.filter}\r\n                filter={tl.filter}\r\n                tasks={durshlak}\r\n                removeTask={removeTasks}\r\n                changeFilter={changeFilter}\r\n                addTasks={addTask}\r\n                changeStatus={changeStatus}\r\n                removeTodoList={removeTodoList}\r\n\r\n            />)\r\n\r\n    })\r\n    return (\r\n        <div className=\"App\">\r\n            {todoListsComponents}\r\n            <button onClick={addTodoList}>Add tl</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"input_error__2Dokx\",\"errorMessage\":\"input_errorMessage__1vXif\"};"],"sourceRoot":""}